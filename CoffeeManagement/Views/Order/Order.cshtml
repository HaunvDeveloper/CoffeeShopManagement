@model List<CoffeeManagement.Models.Product>

@{
    ViewData["Title"] = "Order";
    var categories = ViewBag.Categories as IEnumerable<SelectListItem>;
    var customers = ViewBag.Customers as IEnumerable<SelectListItem>;
    var tables = ViewBag.Tables as IEnumerable<SelectListItem>;
    var paymentMethod = new List<SelectListItem>
    {
        new SelectListItem { Value = "cash", Text = "Tiền mặt" },
        new SelectListItem { Value = "card", Text = "Thẻ" },
        new SelectListItem { Value = "mobile", Text = "Chuyển khoản" }
    };
}

@section Links {
    <style>
        #card-list-product .card-img-top {
            border-radius: 10px;
        }

        #card-list-product .card:hover {
            transform: scale(1.05);
        }

        #card-list-product .card {
            transition: transform 0.2s;
            border-radius: 10px;
        }

        .table-hover tbody tr:hover {
            background-color: #f1f1f1;
        }

        
    </style>
}

<div class="container-fluid py-4 d-flex flex-column align-items-center">
    <h2 class="text-center mb-4 text-primary" style="font-size: 30px; font-weight: bold;">POS ORDER</h2>
    <div class="row g-3 container">
        <!-- Left Column: Product List -->
        <div class="col-lg-7">
            <div id="card-list-product" class="card shadow-sm p-4 h-100">
                <h4 class="mb-3">Products</h4>
                <!-- Search and Filter -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <input type="text" id="searchInput" class="form-control" placeholder="Search products..." />
                    </div>
                    <div class="col-md-6">
                        <select id="categoryFilter" class="form-select">
                            <option value="">All Categories</option>
                            @foreach (var category in categories)
                            {
                                <option value="@category.Value">@category.Text</option>
                            }
                        </select>
                    </div>
                </div>
                <!-- Product Grid -->
                <div class="row g-3" id="productList">
                    @foreach (var product in Model)
                    {
                        <div class="col-md-4 product-item" data-category="@product.CategoryId" data-name="@product.Name.ToLower()" >
                            <div class="card h-100 shadow-sm">
                                <img src="@(product.ImageBinary != null ? $"data:image/jpeg;base64,{Convert.ToBase64String(product.ImageBinary)}" : "/images/placeholder.jpg")" class="card-img-top" alt="@product.Name" style="height: 150px; object-fit: cover;" />
                                <div class="card-body">
                                    <div class="d-flex justify-content-between mb-2">
                                        <h6 class="card-title">@product.Name</h6>
                                        <b class="card-text text-success text-no-wrap">@((product.Price * (1 + product.Vat / 100)).ToString("C", new System.Globalization.CultureInfo("vi-VN")))</b>
                                    </div>
                                    <button class="btn btn-primary btn-sm w-100 add-to-cart" data-id="@product.Id" data-name="@product.Name" data-price="@(product.Price * (1 + product.Vat / 100))" >Add to Order</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Right Column: Order Details -->
        <div class="col-lg-5">
            <div class="card shadow-sm p-4 h-100">
                <h4 class="mb-3">Order Details</h4>
                <!-- Customer Selection -->
                <div class="mb-3">
                    <label for="customerSelect" class="form-label">Customer</label>
                    <div class="input-group">
                        <select id="customerSelect" class="form-select">
                            <option value="">Khách vãng lai</option>
                            @foreach (var customer in customers)
                            {
                                <option value="@customer.Value">@customer.Text</option>
                            }
                        </select>
                        <button type="button" class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#addCustomerModal">Add Customer</button>
                    </div>
                </div>
                <!-- Active TakeHome Toggle -->
                <div class="mb-2">
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="isTakeHome" />
                        <label class="form-check-label" for="isTakeHome">Mang về</label>
                    </div>
                </div>
                <!-- Table Selection -->
                <div class="mb-3 toggle-table-select">
                    <label for="tableSelect" class="form-label">Table</label>
                    <select asp-items="tables" id="tableSelect" class="form-select">
                        <option value="">Chọn sau</option>
                    </select>
                </div>
                <!-- Order Items -->
                <div class="table-responsive">
                    <table class="table table-sm table-hover" id="orderTable">
                        <thead class="table-secondary">
                            <tr>
                                <th>Product</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th class="text-nowrap">Discount(%)</th>
                                <th>Total</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody id="orderItems"></tbody>
                    </table>
                </div>
                <div class="mb-3">
                    <label for="tableSelect" class="form-label">Payment Status</label>
                    <select id="PaymentMethod" asp-items="paymentMethod" id="tableSelect" class="form-select">
                        <option value="">Chưa thanh toán</option>
                    </select>
                </div>
                <!-- Order Summary -->
                <div class="mt-3">
                    <h5><b>Total: <span id="orderTotal" class="text-success">0 VNĐ</span></b></h5>
                </div>
                <!-- Payment Method Selection -->
                
                <!-- Buttons -->
                <div class="mt-4 d-flex justify-content-end">
                    <a id="back" class="btn btn-outline-secondary me-2" asp-action="ChooseTable" asp-controller="Order">Back</a>
                    <button id="clearOrder" class="btn btn-secondary me-2">Clear Order</button>
                    <button id="submitOrder" class="btn btn-primary">Place Order</button>
                </div>
            </div>
        </div>
    </div>
</div>



<!-- Add Quick Customer Modal -->
<div class="modal fade" id="addCustomerModal" tabindex="-1" aria-labelledby="addCustomerModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addCustomerModalLabel">Add New Customer</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <form id="addCustomerForm" class="needs-validation" novalidate>
                    <div class="mb-3">
                        <label for="firstName" class="form-label">First Name</label>
                        <input type="text" class="form-control" id="firstName" placeholder="Enter first name" required />
                        <div class="invalid-feedback">Please enter a first name.</div>
                    </div>
                    <div class="mb-3">
                        <label for="lastName" class="form-label">Last Name</label>
                        <input type="text" class="form-control" id="lastName" placeholder="Enter last name" />
                    </div>
                    <div class="mb-3">
                        <label for="phoneNo" class="form-label">Phone (Optional)</label>
                        <input type="text" class="form-control" id="phoneNo" placeholder="Enter phone number" />
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email (Optional)</label>
                        <input type="email" class="form-control" id="email" placeholder="Enter email" />
                    </div>
                    <div class="mb-3">
                        <label for="address" class="form-label">Address (Optional)</label>
                        <textarea class="form-control" id="address" placeholder="Enter address" rows="3"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" id="saveCustomerBtn">Save Customer</button>
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            let orderItems = [];

            // Hàm lấy query parameter
            function getQueryParam(name) {
                const urlParams = new URLSearchParams(window.location.search);
                return urlParams.get(name);
            }

            // Lấy saleId từ URL hoặc ViewBag
            const saleId = getQueryParam('saleId') || '@ViewBag.SaleId';

            // Load dữ liệu đơn hàng nếu đang chỉnh sửa
            if (saleId) {
                $.ajax({
                    url: '@Url.Action("GetOrder", "Order")',
                    method: 'GET',
                    data: { saleId: saleId },
                    success: function (response) {
                        if (response.success) {
                            // Điền thông tin đơn hàng
                            $('#customerSelect').val(response.order.customerId || '');
                            $('#PaymentMethod').val(response.order.paymentMethod || '');
                            // Điền danh sách sản phẩm
                            orderItems = response.order.orderDetails.map(item => ({
                                id: item.productId,
                                name: item.productName,
                                price: item.unitPrice,
                                quantity: item.quantity,
                                discount: item.discount || 0
                            }));
                            updateOrderTable();
                            // Cập nhật tiêu đề
                            $('h2.text-center').text('CHỈNH SỬA ĐƠN HÀNG #' + saleId);
                            // Thay đổi action submit
                            $('#submitOrder').data('action', 'EditOrder').data('saleId', saleId);
                        } else {
                            alert('Error: ' + response.message);
                        }
                    },
                    error: function (xhr) {
                        alert('An error occurred while loading the order: ' + xhr.statusText);
                    }
                });
            }

            // Search Products
            $('#searchInput').on('input', function () {
                const searchTerm = $(this).val().toLowerCase();
                filterProducts(searchTerm, $('#categoryFilter').val());
            });

            // Filter by Category
            $('#categoryFilter').on('change', function () {
                const categoryId = $(this).val();
                filterProducts($('#searchInput').val().toLowerCase(), categoryId);
            });

            // Filter Products Function
            function filterProducts(searchTerm, categoryId) {
                $('.product-item').each(function () {
                    const productName = $(this).data('name');
                    const productCategory = $(this).data('category').toString();
                    const matchesSearch = productName.includes(searchTerm);
                    const matchesCategory = !categoryId || productCategory === categoryId;
                    $(this).toggle(matchesSearch && matchesCategory);
                });
            }

            // Change Text Button Submit
            $('#PaymentMethod').on('change', (Element) => {
                const paymentMethod = $(Element.target).val();
                if (paymentMethod) {
                    $('#submitOrder').text('Confirm Payment');
                    $('#submitOrder').removeClass('btn-primary').addClass('btn-danger');
                } else {
                    $('#submitOrder').text('Place Order');
                    $('#submitOrder').removeClass('btn-danger').addClass('btn-primary');

                }
            });

            const takeHome = getQueryParam('tableId') == 0;
            if(takeHome) {
                $('#isTakeHome').prop('checked', true);
                $('#tableSelect').prop('disabled', true);
                $('#tableSelect').val(null);
                $('.toggle-table-select').hide();
            } 
            // Disabled Table Select While check TakeHome checkbox
            $('#isTakeHome').on('change', function () {
                if ($(this).is(':checked')) {
                    $('#tableSelect').prop('disabled', true);
                    $('#tableSelect').val(null);
                    $('.toggle-table-select').hide();
                } else {
                    $('#tableSelect').prop('disabled', false);
                    $('.toggle-table-select').show();
                }
            });

            // Add to Order
            $('.add-to-cart').on('click', function () {
                const id = $(this).data('id');
                const name = $(this).data('name');
                const price = parseFloat($(this).data('price'));
                const existingItem = orderItems.find(item => item.id === id);
                if (existingItem) {
                    existingItem.quantity++;
                } else {
                    orderItems.push({ id, name, price, quantity: 1, discount: 0 });
                }
                updateOrderTable();
            });

            // Remove Item from Order
            $(document).on('click', '.remove-item', function () {
                const id = $(this).data('id');
                orderItems = orderItems.filter(item => item.id !== id);
                updateOrderTable();
            });

            // Update Order Table
            function updateOrderTable() {
                $('#orderItems').empty();
                let total = 0;

                orderItems.forEach(item => {
                    const itemTotal = item.price * item.quantity * (1 - (item.discount / 100));
                    total += itemTotal;
                    $('#orderItems').append(`
                            <tr>
                                <td>${item.name}</td>
                                <td>${item.price.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</td>
                                <td>
                                    <input type="number" class="form-control input-sm quantity-input" id="quantityInput" data-id="${item.id}" value="${item.quantity}" min="1" style="width: 70px;" />
                                </td>
                                <td class="text-left">
                                    <input type="number" class="form-control input-sm discount-input" id="discountInput" data-id="${item.id}" value="${item.discount}" min="0" max="100" style="width: 70px;" />
                                </td>
                                <td>${itemTotal.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</td>
                                <td><button class="btn btn-danger btn-sm remove-item" data-id="${item.id}"><i class="bi bi-trash-fill"></i></button></td>
                            </tr>
                    `);
                });

                $('#orderTotal').text(total.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' }));
            }

            // Update Quantity
            $(document).on('change', '.quantity-input', function() {
                const id = $(this).data('id');
                const quantity = parseInt($(this).val());
                if (quantity >= 1) {
                    const item = orderItems.find(item => item.id === id);
                    if (item) {
                        item.quantity = quantity;
                        updateOrderTable();
                    }
                } else {
                    $(this).val(1);
                }
            });

            // Update Discount
            $(document).on('change', '.discount-input', function() {
                const id = $(this).data('id');
                const discount = parseInt($(this).val());
                if (discount >= 0) {
                    const item = orderItems.find(item => item.id === id);
                    if (item) {
                        item.discount = discount;
                        updateOrderTable();
                    }
                } else {
                    $(this).val(0);
                }
            });

            // Clear Order
            $('#clearOrder').on('click', function () {
                orderItems = [];
                updateOrderTable();
                $('#customerSelect').val('');
                $('#tableSelect').val('');
                $('#PaymentMethod').val('');
            });

            // Save New Customer
            $('#saveCustomerBtn').on('click', function () {
                const firstName = $('#firstName').val().trim();
                const lastName = $('#lastName').val().trim();
                const phoneNo = $('#phoneNo').val().trim();
                const email = $('#email').val().trim();
                const address = $('#address').val().trim();
                const customerForm = $('#addCustomerForm')[0];

                // Validate form
                if (!firstName) {
                    if (!firstName) $('#firstName').addClass('is-invalid');
                    else $('#firstName').removeClass('is-invalid');
                    customerForm.classList.add('was-validated');
                    return;
                } else {
                    $('#firstName').removeClass('is-invalid');
                }

                $.ajax({
                    url: '@Url.Action("Create", "Customer")',
                    method: 'POST',
                    data: {
                        CustomerNo: "KH",
                        FirstName: firstName,
                        LastName: lastName || null,
                        PhoneNo: phoneNo || null,
                        Email: email || null,
                        Address: address || null,
                        CreatedByUserId: 1 // Giả định người dùng hiện tại có ID là 1
                    },
                    success: function (response) {
                        if (response.success) {
                            const newOption = $('<option>', {
                                value: response.customerId,
                                text: `${response.customerNo} - ${response.firstName} ${response.lastName || ''}`.trim()
                            });
                            $('#customerSelect').append(newOption);
                            $('#customerSelect').val(response.customerId);
                            $('#addCustomerModal').modal('hide');
                            $('#firstName').val('');
                            $('#lastName').val('');
                            $('#phoneNo').val('');
                            $('#email').val('');
                            $('#address').val('');
                            alert('Customer created successfully!');
                        } else {
                            alert('Error: ' + (response.message || 'Failed to create customer.'));
                        }
                    },
                    error: function (xhr) {
                        alert('An error occurred while creating the customer: ' + xhr.statusText);
                    }
                });
            });

            // Submit Order
            $('#submitOrder').on('click', function () {
                if (orderItems.length === 0) {
                    alert('Please add at least one product to the order.');
                    return;
                }
                $(this).attr('disabled', true);
                const action = $(this).data('action') || 'CreateOrder';
                const saleId = $(this).data('saleId');
                const order = {
                    Items: orderItems.map(item => ({
                        Id: item.id,
                        Quantity: item.quantity,
                        Price: item.price,
                        Discount: item.discount,
                        TotalPrice: item.price * item.quantity * (1 - (item.discount / 100))
                    })),
                    IsTakeHome: $('#isTakeHome').is(':checked'),
                    CustomerId: $('#customerSelect').val() || 0,
                    TableId: $('#tableSelect').val() || 0,
                    PaymentMethod: $('#PaymentMethod').val() || null
                };

                const url = action === 'EditOrder' ? '@Url.Action("EditOrder", "Order")' + '?saleId=' + saleId : '@Url.Action("CreateOrder", "Order")';

                $.ajax({
                    url: url,
                    type: 'POST',
                    data: { saleId: saleId, order: order },
                    success: function (response) {
                        if (response.success) {
                            if(response.isPaid)
                            {
                                showAlertRedirect("success", 'Order placed successfully!', "", response.redirect, false, false, 1000);
                            } else {
                                showAlertRedirect("success", 'Order saved successfully!', "", `@Url.Action("ChooseTable")`, false, false, 1000);
                            }
                        } else {
                            $('#submitOrder').attr('disabled', true);
                            alert('Error: ' + (response.message || 'Failed to ' + (action === 'EditOrder' ? 'update' : 'place') + ' order.'));
                        }
                    },
                    error: function (xhr) {
                        $('#submitOrder').attr('disabled', true);
                        alert('An error occurred while ' + (action === 'EditOrder' ? 'updating' : 'placing') + ' the order: ' + xhr.statusText);
                    }
                });
            });

            
        
        });
    </script>
}